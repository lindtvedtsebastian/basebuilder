* Game programming submission
** Members
- Sebastian Lindtvedt (@lindtvedtsebastian)
- Dennis Kristiansen (@TurboCartPig)
- Elvis Arifagic (@Dangeroustuber)
- Salvador Bascunan (@salvadorbascunan)
- Markus Strømseth (@markuszakarias)
- Marius Fredriksen (@MariusKristofferFredriksen)

** Game controls

*** Main Menu
- Navigate and interact with mouse

*** Movement 
- W - move up
- A - move left
- S - move down
- D - move right

*** Player inventory
- TAB - open/close player inventory
- Mouse Hover - Hovering on slot on right side of inventory to get craftable information 
- Mouse Click - Click on slot on right side of inventory to craft an object
- Mouse Click - Click on slot on left side of inventory to /Place object/ item on map

*** Chest Inventory
- Mouse Hover - Hover over a chest entity on the map
- E - While hovering over chest entity on map, open chest inventory
- Mouse click - Click on slot on right/left to transfer item from player to chest or vice versa
- TAB - Close chest inventory

*** Place object
- Mouse Position - After clicking on item in /Player inventory/, preview is shown for placement of object 
- ESC - Cancel action

*** Rotate object when placing
- Mouse Position - After clicking on item in /Player inventory/, preview is shown for placement of object
- R - Rotate the object. Works only on Walls and Gates
- ESC - Cancel action

*** Dialogue
- I - Enter dialogue mode
- I - When close to NPC on map, have dialogue interaction
- ENTER - to continue in dialogue
- Arrows - navigate dialogue choices
- X - cancel dialogue interaction

*** Game Menu
- ESC - open game Menu
- Mouse click - on "Resume" button to continue playing game
- Mouse click - on "Save and Exit" button to save and exit game

** Gameplay video

- [[https://www.youtube.com/watch?v=1tioOZyGyYQ&t=6s]]

** Discussion around the development process

*** Thoughts on Unity

Choosing an engine for our game was done fairly quickly. Since we had decided to create a 2D game, we discarded Unreal Engine as a viable option. Looking at the strength and weaknesses of both Godot and Unity we decided to go for Unity because we could write in C# and it “felt” right. In this section we will talk about our thoughts on Unity and how our experience was developing our game in this engine.

Some of our team members had a little bit of prior knowledge working with the engine. This consisted of small game projects and working with 3D scenes. This project required a deeper understanding of both game development and programming in general. We decided to use GitHub for collaboration and version control, more on this in the Version control and issue tracking section of the report. 

Since our game idea revolved around 2D Pixel Art, we started gathering inspiration and wanted to get content on a scene quickly. We quickly found that in Unity, prototyping can be done in a fairly easy and agile way. Mocking up a scene, creating some simple game objects and having basic movement code does not take a lot of time. 

Our ambition with this project was to use up-to-date methods in Unity game development. For example, this entailed using the new input system that Unity added in 2019. Here, we resorted to the Unity documentation and looked at several official examples of how different functionality could be implemented. The documentation proved to mostly be a great tool for us, with a few exceptions where the docs were a bit outdated. 

Our development process in Unity proved to be a bit of a challenge regarding version control. We experienced a lot of “disconnections” on assets when pushing and pulling code. Researching what the cause of this could be, we found that the “cloud collaboration” had accidentally been enabled in our project. This led to .meta files not being pushed in the repository and therefore some connections were broken when someone else tried pulling these changes. This created a great deal of headache for the team and made it seem as though the person pushing the code had forgotten to save the scene or include important files. Another issue some of the team members had was re-compiling of the project whenever a change was made in the code. By default this proved to take quite a bit of time once the project size increased. 

Although these issues were not huge, they still took quite a bit of time that could have been used in development. Luckily these can be handled with a few settings tweaks, and is something we will keep in mind in future projects.

*** Process and communication

The process and communication is an important part of any given project. These are subjects we have been exposed to multiple times throughout this study program, and we always try to find ways of improving. In this section we will talk about how the process and communication was in this game project.

As our primary communication tool, we just used the discord lobby that was created for us in the class discord. We felt that this was more appropriate to use because this way any teacher that was interested could also pop in and see the discussions that were going on. The team is also very familiar with discord as a means of communication, so it felt natural to go this route instead of spending time choosing another platform and dragging the discussion over there.

Early on, we set a fixed schedule time for meetings that would occur on Fridays. This was to streamline the process a bit, wherein a break would be had after the lecture finished, and then we would have the meeting right after. We felt this was important because we wanted our minds to be more primed for working with this specific subject.

In the very first meeting we laid out clear rules as to how this entire process should go. We wanted to use an agile methodology for the project, inspired by SCRUM. The team wanted to have overview and control through issues. People ought to use the issue tracker, participate in making them, assign themselves to areas they want to work on the most, and we would take it from there. 

Another thing that was important to us was the ability of anybody, any time, any day to ask for help with their task. Even if you were solo-assigned to a specific issue you were not to be left alone if you asked for help. Team members were able to send private messages or messages in the public room and if people were available they would jump right into the voice chat and we would do some pair-programming in order to solve more complicated issues that benefited from two persons point of view.

Reflecting on this process we feel the communication was good within the group. We were able to keep track of each other's work and help out where it was needed. 

*** Version control and issue tracking

It’s important for any programming to have good practices when it comes to version control and issue tracking. This is something we have been exposed to a lot in this study program, and we are still learning. In this section we will talk about how the version control and issue tracking was done in our project.

For this project the team feel as though we have utilized the main tenets of version control very well. By now as programmers we have matured to the point where we have internalized the benefits of such a system and try to practice it on all projects.

In GitHub we chose to create a project board to keep track of the development process. Here we created several columns, which where:
- Backlog
- In progress
- For review
- Done
These columns represent the state in which an issue is. This board also helped us keep the development process organized, as we created these issues together on the Friday meetings. We also had an understanding within the group that an issue had to be approved by another team member in order to be placed in the Done column. 

We chose to implement branch protection rules. This entailed a requirement for a merge from branch to go through a pull request that needed approval from at least one team member. Our reason for implementing this rule was to ensure that everyone was using branches for development, and that nobody had access to push directly to the main branch.

In regard to branches themselves, the team encouraged branches to be features and or systems. So in the case of something like the inventory system that was just a single branch which contained the implementation. The branch would eventually be merged when conflicts were resolved locally. Then the team member would create a pull request that had no merging issues. This with the branch protection rules in mind made for only good clean code being merged with main. Features/systems would have to be of good quality with no known bugs to be approved.

When we reflect on our development process we feel that some of the issues in branches could have been handled more specifically. By this, we mean that sometimes a branch included development for more than one issue. We could also have improved the creation of issues during development. Some of the smaller issues were handled internally so we did not necessarily create specific issues for these. The problem arises in the fact that you can not maintain accountability for mistakes. You lose the ability to trace back the origins of some code, members would be unable to determine why a piece of code exists if it was to conflict with their development.


** Individual discussions

For these deliverables the team will submit individually on blackboard.